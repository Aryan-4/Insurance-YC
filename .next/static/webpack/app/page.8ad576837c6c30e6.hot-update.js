"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/llm.ts":
/*!********************!*\
  !*** ./lib/llm.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SYSTEM_PROMPT: function() { return /* binding */ SYSTEM_PROMPT; },\n/* harmony export */   extractInsured: function() { return /* binding */ extractInsured; },\n/* harmony export */   lastExtractionMethod: function() { return /* binding */ lastExtractionMethod; },\n/* harmony export */   processClaimWithLLM: function() { return /* binding */ processClaimWithLLM; },\n/* harmony export */   validateClaimWithLLM: function() { return /* binding */ validateClaimWithLLM; }\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Configurable system prompt that instructs the LLM how to process the input\nconst SYSTEM_PROMPT = \"You are an expert insurance-claim analyst. Return ONLY the primary insured entity's name from the supplied text. Respond with a raw string and no additional words.\";\n// Track which extraction method was used last (for debugging)\nlet lastExtractionMethod = \"none\";\n/**\n * Extract the insured entity name from claim text using LLM\n * @param text - The raw text from a claim document\n * @param model - Optional model override (default: gemini-1.5-pro)\n * @returns The extracted insured entity name\n * @throws Error if token limit exceeded or network issues occur\n */ async function extractInsured(text) {\n    let model = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"gemini-1.5-pro\";\n    // If no API key is available, return a stub response for demo purposes\n    if (false) {}\n    try {\n        console.log(\"Extracting insured entity using Gemini with text (first 100 chars):\", text.substring(0, 100));\n        // Initialize the Gemini API client\n        const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(\"AIzaSyASju5qN90h27SXaoVKuu5M0_xpJmhtdgo\" || 0);\n        const geminiModel = genAI.getGenerativeModel({\n            model\n        });\n        // Send the request to Gemini\n        console.log(\"Sending request to Gemini API with model: \".concat(model));\n        try {\n            // Configure the generation\n            const generationConfig = {\n                temperature: 0.1,\n                maxOutputTokens: 100\n            };\n            // Create the prompt with system and user prompts combined\n            const prompt = \"\".concat(SYSTEM_PROMPT, \"\\n\\nText: \").concat(text);\n            // Generate content\n            const result = await geminiModel.generateContent({\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig\n            });\n            // Extract the response\n            const response = result.response;\n            const extractedName = response.text().trim();\n            console.log('Gemini extracted insured entity: \"'.concat(extractedName, '\"'));\n            lastExtractionMethod = \"gemini-api\";\n            return extractedName;\n        } catch (apiError) {\n            console.error(\"API call failed:\", apiError);\n            // If API call fails, attempt direct extraction from text to ensure functionality\n            const extractedName = extractInsuredDirect(text);\n            console.log('Fallback extraction found insured entity: \"'.concat(extractedName, '\"'));\n            lastExtractionMethod = \"regex-fallback\";\n            return extractedName;\n        }\n    } catch (error) {\n        console.error(\"LLM extraction error:\", error);\n        // Final fallback - extract directly without LLM\n        const extractedName = extractInsuredDirect(text);\n        console.log('Emergency fallback extracted insured entity: \"'.concat(extractedName, '\"'));\n        lastExtractionMethod = \"regex-fallback\";\n        return extractedName;\n    }\n}\n/**\n * Extract insured entity directly using regex patterns\n * This is a fallback when the LLM API is unavailable\n */ function extractInsuredDirect(text) {\n    // Try multiple regex patterns to extract insured entity\n    const patterns = [\n        /policy\\s*holder:\\s*([^,\\n\\.]+)/i,\n        /policyholder\\s*information:(?:[\\s\\S]*?)insured:\\s*([^,\\n\\.]+)/i,\n        /insured(?:\\s+party|\\s+name|\\s+)?:?\\s*([^,\\n\\.]+)/i,\n        /(?:^|\\s)insured:?\\s*([^,\\n\\.]+)/i,\n        /(?:^|\\s)(?:client|customer|policyholder):?\\s*([^,\\n\\.]+)/i,\n        /ownership.*?includes\\s+([^,\\n\\.]+)/i,\n        /refer\\s+to\\s+([^,\\n\\.]+)\\s+as.*?(?:primary|account holder)/i\n    ];\n    for (const pattern of patterns){\n        const match = text.match(pattern);\n        if (match && match[1]) {\n            const cleaned = match[1].trim();\n            if (cleaned.length > 3) {\n                return cleaned;\n            }\n        }\n    }\n    // Try to find a company-like name in the text\n    const lines = text.split(\"\\n\");\n    // Look for lines that might contain a company name\n    for (const line of lines){\n        // Skip short lines\n        if (line.length < 10) continue;\n        // Skip lines with common headers\n        if (/^(date|policy|claim|incident|reference|submitted|filed)/i.test(line)) continue;\n        // Look for capitalized words that might be a company name\n        const companyPattern = /([A-Z][a-z]+ )+(?:LLC|Inc\\.|Corp\\.?|Ltd\\.?|Company|Group|Partners)/;\n        const companyMatch = line.match(companyPattern);\n        if (companyMatch && companyMatch[0]) {\n            return companyMatch[0];\n        }\n        // Alternative: just return the first line that looks substantial\n        if (line.length > 15 && /[A-Z]/.test(line) && !/^[0-9]/.test(line.trim())) {\n            return line.trim();\n        }\n    }\n    // If no good candidate was found, extract a portion of the document title or beginning\n    // This will create more varied results than a fixed \"Unknown Insured\"\n    const firstLine = lines[0] || \"\";\n    const docType = firstLine.length > 5 ? firstLine.trim() : \"Document\";\n    // Use a portion of the text to create a unique identifier instead of \"Unknown Insured\"\n    return \"\".concat(docType, \" \").concat(text.substring(0, 20).replace(/\\s+/g, \" \").trim());\n}\n/**\n * Provide a stub LLM response that simulates what the LLM would return\n * This is used only for demo purposes when no API key is available\n */ function stubLLMExtraction(text) {\n    console.log(\"Using stub LLM extraction from text\");\n    // Simply defer to the regex-based extraction when in stub mode\n    return extractInsuredDirect(text);\n}\n/**\n * Get the LLM configuration from environment variables\n */ function getLLMConfig() {\n    // In a production app, these would be loaded from environment variables\n    return {\n        model: process.env.LLM_MODEL || \"gemini-1.5-pro\",\n        apiKey: \"AIzaSyASju5qN90h27SXaoVKuu5M0_xpJmhtdgo\" || 0\n    };\n}\n/**\n * Validate the extracted claim data using LLM\n * @param text - Raw text from the PDF\n * @param extractedData - Initially extracted claim data\n * @returns Enhanced claim data with improved accuracy\n */ async function validateClaimWithLLM(text, extractedData) {\n    // TODO: Implement actual LLM API call\n    // Check if API key is available\n    const config = getLLMConfig();\n    if (!config.apiKey) {\n        console.warn(\"LLM API key not configured. Skipping LLM validation.\");\n        return extractedData;\n    }\n    try {\n        // This is where you would make the actual API call to the LLM\n        // Mock implementation for now\n        const enhancedData = await mockLLMCall(text, extractedData);\n        return enhancedData;\n    } catch (error) {\n        console.error(\"Error calling LLM API:\", error);\n        return extractedData; // Return original data if LLM call fails\n    }\n}\n/**\n * Mocked LLM call for development\n * @param text - Raw text from the PDF\n * @param extractedData - Initially extracted claim data\n */ async function mockLLMCall(text, extractedData) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            // Just return the same data with a slightly higher confidence\n            // In a real implementation, this would parse the LLM's response\n            resolve({\n                ...extractedData,\n                confidence: Math.min(extractedData.confidence + 0.2, 1.0)\n            });\n        }, 1000);\n    });\n}\n/**\n * Process a claim with LLM enhancement\n * @param text - Raw text from the PDF\n * @param initialExtraction - Data extracted through regex/rules\n * @returns Enhanced claim data\n */ async function processClaimWithLLM(text, initialExtraction) {\n    // Skip LLM processing if confidence is already high\n    if (initialExtraction.confidence > 0.8) {\n        return initialExtraction;\n    }\n    const enhancedData = await validateClaimWithLLM(text, initialExtraction);\n    return enhancedData;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/llm.ts\n"));

/***/ })

});